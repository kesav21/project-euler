#!/usr/bin/python3

tree = [
    [75],
    [95, 64],
    [17, 47, 82],
    [18, 35, 87, 10],
    [20, 4, 82, 47, 65],
    [19, 1, 23, 75, 3, 34],
    [88, 2, 77, 73, 7, 63, 67],
    [99, 65, 4, 28, 6, 16, 70, 92],
    [41, 41, 26, 56, 83, 40, 80, 70, 33],
    [41, 48, 72, 33, 47, 32, 37, 16, 94, 29],
    [53, 71, 44, 65, 25, 43, 91, 52, 97, 51, 14],
    [70, 11, 33, 28, 77, 73, 17, 78, 39, 68, 17, 57],
    [91, 71, 52, 38, 17, 14, 91, 43, 58, 50, 27, 29, 48],
    [63, 66, 4, 68, 89, 53, 67, 30, 73, 16, 69, 87, 40, 31],
    [4, 62, 98, 27, 23, 9, 70, 98, 73, 93, 38, 53, 60, 4, 23],
]

# tree = [[3], [7, 4], [2, 4, 6], [8, 5, 9, 3]]


def main():

    t = tree

    printt(t)
    path = get_max_path(t)
    print(path)
    print(sum(path))


def printt(t):
    for row in t:
        for column in row:
            print(column, end="\t")
        print()


def get_max_path(t):
    if len(t) == 2:
        return [t[0][0], max(t[1])]

    ml = get_max_path(get_left_subtree(t))
    mr = get_max_path(get_right_subtree(t))

    if sum(ml) > sum(mr):
        return [t[0][0], *ml]
    return [t[0][0], *mr]


def get_left_subtree(t):
    t2 = [x[:] for x in t]
    del t2[0]
    for row in t2:
        del row[-1]
    return t2


def get_right_subtree(t):
    t2 = [x[:] for x in t]
    del t2[0]
    for row in t2:
        del row[0]
    return t2


def get_tree(filename):
    for line in open(filename, "r"):
        yield [int(x) for x in line.split(" ")]


if __name__ == "__main__":
    main()
