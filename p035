#!/usr/bin/env python


def main():
    n = 1_000_000
    primes = set(sieve(n))
    num = sum(1 for i in primes if is_circular_prime(i, primes))
    print(num)


def is_circular_prime(n, primes):
    return all((i in primes) for i in get_rotations(n))


def get_rotations(n):
    s = str(n)
    for i in range(len(s)):
        yield int(s[i:] + s[:i])


def sieve(n):
    """
    an implementation of the sieve of erastothenes,
    used to find prime numbers
    """
    primes = list(range(n + 1))
    primes[1] = 0
    for i in primes:
        if i != 0 and i < int(n ** 0.5):
            for j in range(2 * i, n + 1, i):
                primes[j] = 0
    for i in primes:
        if i != 0:
            yield i


if __name__ == "__main__":
    main()
